/*
 * Boomega
 * Copyright (C)  2021  Daniel Gyoerffy
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

import org.gradle.internal.jvm.Jvm

import java.nio.file.Files

plugins {
    id 'java'
    id 'application'
    id 'org.jetbrains.kotlin.jvm' version '1.5.21'
    id 'com.github.ben-manes.versions' version '0.39.0' // for detecting dependency updates
    id 'com.github.johnrengelman.shadow' version '7.0.0' // building fat jars
    id 'org.panteleyev.jpackageplugin' version '1.3.1' // for jpackage
}

sourceCompatibility = '16'
version '0.7.5'

mainClassName = 'com.dansoftware.boomega.main.Main'
applicationDefaultJvmArgs = [
        '-Dhttps.protocols=TLSv1.2,TLSv1.1,TLSv1', // See #144: https://github.com/Dansoftowner/Boomega/issues/144
        '--add-exports', 'javafx.base/com.sun.javafx=ALL-UNNAMED',
        '--add-exports', 'javafx.base/com.sun.javafx.runtime=ALL-UNNAMED',
        '--add-exports', 'javafx.graphics/com.sun.javafx.application=ALL-UNNAMED',
        '--add-exports', 'javafx.base/com.sun.javafx=ALL-UNNAMED',
        '--add-exports', 'javafx.controls/com.sun.javafx.scene.control.skin.resources=ALL-UNNAMED',
        '--add-exports', 'javafx.graphics/com.sun.javafx.scene=ALL-UNNAMED',
        '--add-exports', 'javafx.graphics/com.sun.glass.ui=ALL-UNNAMED',
        '--add-exports', 'javafx.graphics/com.sun.javafx.text=ALL-UNNAMED',
        '--add-exports', 'javafx.graphics/com.sun.javafx.scene.text=ALL-UNNAMED',
        '--add-exports', 'javafx.graphics/com.sun.javafx.geom=ALL-UNNAMED',
        '--add-opens', 'javafx.graphics/com.sun.javafx.text=ALL-UNNAMED',
        '--add-opens', 'java.base/java.io=ALL-UNNAMED',
        '--add-opens', 'javafx.graphics/javafx.scene.text=ALL-UNNAMED',
        '--add-opens', 'java.base/java.time=ALL-UNNAMED'
]

compileKotlin {
    kotlinOptions {
        jvmTarget = '16'
        freeCompilerArgs += '-Xjvm-default=all'
    }
}

compileJava {
    options.encoding = 'UTF-8'
}

compileTestJava {
    options.encoding = 'UTF-8'
}

repositories {
    mavenCentral()

    //JitPack repository
    maven { url "https://jitpack.io" }

    //repository for markdown-javafx-renderer
    maven {
        url "https://sandec.jfrog.io/artifactory/repo"
    }

    //repository for JUnique
    maven {
        url "https://raw.githubusercontent.com/terjedahl/junique/master/maven2"
    }
}

configurations {
    //we exclude the javafx group
    implementation.exclude group: 'org.openjfx'
}

test {
    useJUnitPlatform()
}

dependencies {
    //Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib:1.5.21"

    //logging
    implementation 'org.slf4j:slf4j-api:1.7.32'
    implementation 'ch.qos.logback:logback-classic:1.2.5'
    implementation 'ch.qos.logback:logback-core:1.2.5'

    //Testing
    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.2'
    testImplementation 'org.assertj:assertj-core:3.20.2'
    testImplementation 'org.mockito:mockito-core:3.12.4'
    testImplementation 'org.mockito:mockito-junit-jupiter:3.12.4'

    implementation 'com.github.Dansoftowner:jUserDirectories:1.0'
    implementation 'com.github.Dansoftowner:jSystemThemeDetector:3.7'
    implementation 'com.github.Dansoftowner:Restart4j:1.4.7'
    implementation 'com.github.Dansoftowner:FXTaskbarProgressBar:v11.4'
    implementation 'com.github.Dansoftowner:SegmentDialogFX:2.0'
    implementation 'com.github.Dansoftowner:MarkdownEditorControlFX:0.6.9.2'

    implementation 'commons-io:commons-io:2.8.0'
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation 'commons-collections:commons-collections:3.2.2'
    implementation 'org.jetbrains:annotations:22.0.0'

    implementation 'org.apache.poi:poi-ooxml:5.0.0' // Microsoft Documents
    implementation 'org.yaml:snakeyaml:1.21'
    implementation 'org.jsoup:jsoup:1.14.2' // HTML parsing
    implementation 'com.google.code.gson:gson:2.8.8' // JSON Parsing
    implementation 'org.dizitart:nitrite:3.4.3' // NoSql database
    implementation 'com.github.ben-manes.caffeine:caffeine:3.0.3'
    implementation 'com.github.oshi:oshi-core:5.8.1'
    implementation 'com.squareup.okhttp3:okhttp:4.9.1'
    implementation 'it.sauronsoftware:junique:1.0.4'
    implementation 'io.github.g00fy2:versioncompare:1.4.1'

    implementation 'org.jfxtras:jmetro:11.6.15'
    implementation 'net.kurobako:gesturefx:0.7.1'
    implementation 'io.github.typhon0:AnimateFX:1.2.2'
    implementation 'com.sandec:mdfx:0.2.3'
    implementation "de.jangassen:nsmenufx:3.1.0"
    implementation 'com.dlsc.formsfx:formsfx-core:11.4.2'
    implementation 'com.dlsc.workbenchfx:workbenchfx-core:11.1.0'
    implementation 'org.fxmisc.richtext:richtextfx:0.10.6'
    implementation 'org.controlsfx:controlsfx:11.1.0'

    //implementation from the local file system
    implementation fileTree(dir: 'external-libraries', include: '*.jar')
}


shadowJar {
    exclude 'javafx/**'
    exclude 'javafx.properties'
    exclude 'javafx-swt.jar'
    exclude 'junit/**'
    exclude 'module-info.class'

    manifest.attributes('Main-Class': mainClassName)
}

/* -------------------------- Distribution -------------------------- */

def distributionDir = new File(projectDir, "distribution")
def distributionInputDir = new File(distributionDir, "input")
def distributionBuildDir = new File(distributionDir, "build")
def distributionTempDir = new File(distributionDir, "temp")
def distributionRuntimeDir = new File(distributionDir, "java-runtime")
def distributionIconDir = new File(distributionDir, "icon")
def distributionFileAssociationsDir = new File(distributionDir, "file-associations")

def jlinkExecutable = new File(Jvm.current().getJavaHome(), "bin${File.separator}jlink")


task cleanDistributionTemp(type: Delete) {
    doFirst {
        delete distributionTempDir
    }

    doLast {
        distributionTempDir.mkdir()
    }
}

task cleanDistributionBuild(type: Delete) {
    doFirst {
        delete distributionBuildDir
    }
}

task cleanDistributionInput(type: Delete) {
    doFirst {
        delete distributionInputDir
    }

    doLast {
        distributionInputDir.mkdir()
    }
}

task buildDistributionInput {
    dependsOn shadowJar
    dependsOn cleanDistributionInput
    doLast {
        Files.copy(
                tasks.shadowJar.archiveFile.get().asFile.toPath(),
                new File(distributionInputDir, tasks.shadowJar.archiveFileName.get()).toPath()
        )
    }
}

task cleanDistributionRuntime {
    doFirst {
        delete distributionRuntimeDir
    }
}

// builds a java-runtime using jlink
task jlink(type: Exec) {
    dependsOn cleanDistributionRuntime
    workingDir = distributionDir.toString()
    executable = jlinkExecutable.toString()
    args = [
            '--output',
            distributionRuntimeDir,
            // reducing the file sizes
            '--strip-debug',
            '--compress', '2',
            '--no-header-files',
            '--no-man-pages',
            // required modules
            '--add-modules',
            'java.se,javafx.base,javafx.controls,javafx.fxml,javafx.graphics,javafx.media,javafx.web'
    ]
}

task preparteDistribution {
    dependsOn cleanDistributionTemp
    dependsOn cleanDistributionBuild
    dependsOn buildDistributionInput
    dependsOn jlink
}

jpackage {
    dependsOn preparteDistribution

    appName = project.name
    appVersion = project.version
    vendor = 'Dansoftware'
    javaOptions = applicationDefaultJvmArgs

    input = distributionInputDir.toString()
    destination = distributionBuildDir.toString()
    temp = distributionTempDir.toString()
    mainJar = shadowJar.archiveFileName.get().toString()
    runtimeImage = distributionRuntimeDir.toString()

    licenseFile = "LICENSE"

    winMenu = true
    winDirChooser = true
    winShortcut = true

    linuxDebMaintainer = "dansoftwareowner@gmail.com"
    linuxMenuGroup = project.name
    linuxShortcut = true

    windows {
        icon = "${distributionIconDir}/Boomega.ico"
        fileAssociations = ["${distributionFileAssociationsDir}/file-associations-win.properties"]
    }

    linux {
        icon = "${distributionIconDir}/Boomega.png"
        fileAssociations = ["${distributionFileAssociationsDir}/file-associations-linux.properties"]
    }

    mac {
        icon = "${distributionIconDir}/Boomega.icns"
        fileAssociations = ["${distributionFileAssociationsDir}/file-associations-mac.properties"]
    }
}





