/*
 * Boomega - A modern book explorer & catalog application
 * Copyright (C) 2020-2022  Daniel Gyoerffy
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */


import com.dansoftware.buildscript.SourceFileType

import static com.dansoftware.buildscript.CheckIllegalSourceFiles.checkIllegalSourceFiles

buildscript {
    repositories {
        gradlePluginPortal()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$KOTLIN_VERSION"
        classpath "org.openjfx:javafx-plugin:$JAVAFX_PLUGIN_VERSION"
        classpath "com.github.ben-manes:gradle-versions-plugin:0.42.0"
    }
}

allprojects {
    group 'com.dansoftware.boomega'
    version BOOMEGA_VERSION
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'org.jetbrains.kotlin.jvm'
    apply plugin: 'com.github.ben-manes.versions'
    apply plugin: 'org.openjfx.javafxplugin'

    repositories {
        mavenCentral()
        maven { url "https://jitpack.io" }
        maven { url "https://raw.githubusercontent.com/terjedahl/junique/master/maven2" } // repository for JUnique
        maven { url "https://sandec.jfrog.io/artifactory/repo" } // repository for MDFX
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    }

    task findIllegalSourceFiles {
        checkIllegalSourceFiles(fileTree(dir: 'src/main/kotlin'), SourceFileType.KOTLIN)
        checkIllegalSourceFiles(fileTree(dir: 'src/test/kotlin'), SourceFileType.KOTLIN)
        checkIllegalSourceFiles(fileTree(dir: 'src/main/java'), SourceFileType.JAVA)
        checkIllegalSourceFiles(fileTree(dir: 'src/test/java'), SourceFileType.JAVA)
    }

    [compileJava, compileTestJava, compileKotlin, compileTestKotlin].forEach {
        it.dependsOn(tasks.findIllegalSourceFiles)
    }

    [compileJava, compileTestJava].forEach {
        it.sourceCompatibility = JAVA_VERSION
        it.targetCompatibility = JAVA_VERSION
        it.options.encoding = 'UTF-8'
    }

    [compileKotlin, compileTestKotlin].forEach {
        it.kotlinOptions {
            jvmTarget = JAVA_VERSION
            freeCompilerArgs += '-Xjvm-default=all'
        }
    }

    test {
        useJUnitPlatform()
    }

    javafx {
        version = JAVAFX_VERSION
    }

    dependencies {
        implementation "org.jetbrains.kotlin:kotlin-stdlib:$KOTLIN_VERSION"

        //logging
        implementation 'org.slf4j:slf4j-api:1.7.36'

        // common annotations
        implementation 'org.jetbrains:annotations:23.0.0'

        //Testing
        testImplementation 'org.junit.jupiter:junit-jupiter:5.8.2'
        testImplementation 'org.assertj:assertj-core:3.22.0'
        testImplementation 'org.mockito:mockito-core:4.4.0'
        testImplementation 'org.mockito:mockito-junit-jupiter:4.3.1'
        testImplementation 'org.junit.jupiter:junit-jupiter-params:5.8.2'
    }

    project.ext {
        logback_classic = 'ch.qos.logback:logback-classic:1.2.11'
        logback_core = 'ch.qos.logback:logback-core:1.2.11'

        commons_lang = 'org.apache.commons:commons-lang3:3.12.0'
        commons_collections = 'commons-collections:commons-collections:3.2.2'
        commons_io = 'commons-io:commons-io:2.11.0'
        guice = 'com.google.inject:guice:5.1.0'
        gson = 'com.google.code.gson:gson:2.9.0'
        caffeine = 'com.github.ben-manes.caffeine:caffeine:3.0.6'
        junique = 'it.sauronsoftware:junique:1.0.4'
        oshi = 'com.github.oshi:oshi-core:6.1.5'
        juser_directories = 'com.github.Dansoftowner:jUserDirectories:1.0'

        nitrite = 'org.dizitart:nitrite:3.4.4'
        hibernate = 'org.hibernate:hibernate-core:5.6.7.Final'
        jdbcmysql = 'mysql:mysql-connector-java:8.0.28'

        poi = 'org.apache.poi:poi-ooxml:5.2.2'
        text_tables = 'com.github.inamik.text.tables:inamik-text-tables:1.0-SNAPSHOT'

        okhttp = 'com.squareup.okhttp3:okhttp:4.9.3'
        version_compare = 'io.github.g00fy2:versioncompare:1.5.0'

        controlsfx = 'org.controlsfx:controlsfx:11.1.1'
        validatorfx = 'net.synedra:validatorfx:0.3.1'
        formsfx = 'com.dlsc.formsfx:formsfx-core:11.5.0'
        animatefx = 'io.github.typhon0:AnimateFX:1.2.2'
        workbenchfx = 'com.dlsc.workbenchfx:workbenchfx-core:11.1.0'
        nsmenufx = 'de.jangassen:nsmenufx:3.1.0'
        gesturefx = 'net.kurobako:gesturefx:0.7.1'
        jmetro = 'org.jfxtras:jmetro:11.6.15'
        mdfx = 'com.sandec:mdfx:0.2.6'
        richtextfx = 'org.fxmisc.richtext:richtextfx:0.10.9'
        fxtaskbarprogressbar = 'com.github.Dansoftowner:FXTaskbarProgressBar:v11.4'
        segmentdialogfx = 'com.github.Dansoftowner:SegmentDialogFX:2.0'
        mdeditorcontrolfx = 'com.github.Dansoftowner:MarkdownEditorControlFX:0.6.9.2'
        jthemedetector = 'com.github.Dansoftowner:jSystemThemeDetector:3.8'
        restart4j = 'com.github.Dansoftowner:Restart4j:1.4.7'
    }

}