plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.4.30'
    id 'com.github.ben-manes.versions' version '0.38.0'
}

compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'

version '0.5.0'
def mainClass = 'com.dansoftware.boomega.main.Main'

compileKotlin {
    kotlinOptions {
        jvmTarget = "11"
        useIR = true
    }
}

compileJava {
    options.compilerArgs += ["--add-exports", "javafx.base/com.sun.javafx=ALL-UNNAMED"]
    options.compilerArgs += ["--add-exports", "javafx.base/com.sun.javafx.runtime=ALL-UNNAMED"]
    options.compilerArgs += ["--add-exports", "javafx.graphics/com.sun.javafx.application=ALL-UNNAMED"]
    options.compilerArgs += ["--add-exports", "javafx.base/com.sun.javafx=ALL-UNNAMED"]
    options.compilerArgs += ["--add-exports", "javafx.controls/com.sun.javafx.scene.control.skin.resources=ALL-UNNAMED"]
    options.compilerArgs << '-Xlint:unchecked'
}

compileTestJava {
    options.compilerArgs += ["--add-exports", "javafx.base/com.sun.javafx=ALL-UNNAMED"]
    options.compilerArgs += ["--add-exports", "javafx.base/com.sun.javafx.runtime=ALL-UNNAMED"]
    options.compilerArgs += ["--add-exports", "javafx.graphics/com.sun.javafx.application=ALL-UNNAMED"]
    options.compilerArgs += ["--add-exports", "javafx.base/com.sun.javafx=ALL-UNNAMED"]
    options.compilerArgs += ["--add-exports", "javafx.controls/com.sun.javafx.scene.control.skin.resources=ALL-UNNAMED"]
}

repositories {
    mavenCentral()
    jcenter()

    //JitPack repository
    maven { url "https://jitpack.io" }

    //repository for JMetro
    maven { url "https://dl.bintray.com/dukke/maven" }

    //repository for FontawesomeFX
    maven { url "https://dl.bintray.com/jerady/maven" }

    //repository for markdown-javafx-renderer
    maven {
        url "http://sandec.bintray.com/repo"
    }

    //repository for JUnique
    maven {
        url "https://raw.githubusercontent.com/terjedahl/junique/master/maven2"
    }
}

configurations {
    //for holding the dependencies
    libraries

    //we exclude the javafx group
    libraries.exclude group: 'org.openjfx'
}

test {
    useJUnitPlatform()
}

dependencies {
    //Kotlin
    libraries "org.jetbrains.kotlin:kotlin-stdlib"

    //logging
    libraries 'org.slf4j:slf4j-api:1.7.30'
    libraries 'ch.qos.logback:logback-classic:1.2.3'
    libraries 'ch.qos.logback:logback-core:1.2.3'

    //Testing
    testImplementation 'org.junit.jupiter:junit-jupiter:5.5.2'
    testImplementation 'org.assertj:assertj-core:3.11.1'
    testImplementation 'org.mockito:mockito-core:3.8.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:3.8.0'

    libraries 'com.google.code.gson:gson:2.8.6'
    libraries 'org.jetbrains:annotations:20.1.0'
    libraries 'org.reflections:reflections:0.9.12'
    libraries 'commons-io:commons-io:2.6'
    libraries 'org.apache.commons:commons-lang3:3.10'
    libraries 'commons-collections:commons-collections:3.2.2'
    libraries 'com.github.Dansoftowner:jFileGoodies:1.2.6'
    libraries 'com.github.oshi:oshi-core:5.6.0'
    libraries 'com.github.Dansoftowner:jSystemThemeDetector:2.1'
    libraries 'com.github.Dansoftowner:Restart4j:1.0'
    libraries 'org.jsoup:jsoup:1.13.1'
    libraries 'com.squareup.okhttp3:okhttp:4.9.0'
    libraries 'org.apache.httpcomponents:httpclient:4.5.13'
    libraries 'com.github.ben-manes.caffeine:caffeine:3.0.1'
    libraries 'org.dizitart:nitrite:3.4.3'
    libraries 'it.sauronsoftware:junique:1.0.4'

    /*** JAVA FX LIBRARIES ***/

    libraries 'com.jfoenix:jfoenix:9.0.10'
    libraries 'org.jfxtras:jmetro:11.6.14'
    libraries 'org.controlsfx:controlsfx:11.1.0'
    libraries 'com.dlsc.formsfx:formsfx-core:11.4.1'
    libraries 'net.kurobako:gesturefx:0.6.0'
    //Modified WorkBenchFX, Original: 'com.dlsc.workbenchfx:workbenchfx-core:11.1.0'
    libraries 'com.github.Dansoftowner:workbenchfx-fork:11.1.7'
    libraries 'de.jensd:fontawesomefx-commons:11.0'
    libraries 'de.jensd:fontawesomefx-fontawesome:4.7.0-11'
    libraries 'io.github.typhon0:AnimateFX:1.2.2'
    libraries "com.sandec:mdfx:0.1.7"
    libraries 'com.github.Dansoftowner:FXTaskbarProgressBar:v11.4'
    libraries 'com.github.Dansoftowner:SegmentDialogFX:2.0'
    libraries "de.jangassen:nsmenufx:3.1.0"

    //libraries from the local file system
    libraries fileTree(dir: 'external-libraries', include: '*.jar')

    // libraries = implementation
    configurations.implementation.extendsFrom(configurations.libraries)
}


jar {
    //we exclude the javafx package from the jar
    exclude('javafx/**')
    //we exclude junit from the jar
    exclude('junit/**')
    //we exclude unnecessary javafx-swt.jar resource
    exclude('javafx-swt.jar')

    manifest {
        attributes 'Main-Class': mainClass
    }

    from {
        // we include all libraries in a single jar
        configurations.libraries.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

