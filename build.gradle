import java.nio.file.Files
import java.nio.file.Paths

plugins {
    id 'java'
    id 'application'
    id 'org.jetbrains.kotlin.jvm' version '1.4.32'
    id 'com.github.ben-manes.versions' version '0.38.0'
    id 'com.github.johnrengelman.shadow' version '6.1.0' // building fat jars
    id "org.panteleyev.jpackageplugin" version "1.3.1" // for jpackage
}

sourceCompatibility = '16'
version '0.5.0'

mainClassName = 'com.dansoftware.boomega.main.Main'
applicationDefaultJvmArgs = [
        '--add-exports', 'javafx.base/com.sun.javafx=ALL-UNNAMED',
        '--add-exports', 'javafx.base/com.sun.javafx.runtime=ALL-UNNAMED',
        '--add-exports', 'javafx.graphics/com.sun.javafx.application=ALL-UNNAMED',
        '--add-exports', 'javafx.base/com.sun.javafx=ALL-UNNAMED',
        '--add-exports', 'javafx.controls/com.sun.javafx.scene.control.skin.resources=ALL-UNNAMED',
        '--add-exports', 'javafx.graphics/com.sun.javafx.scene=ALL-UNNAMED',
        '--add-exports', 'javafx.graphics/com.sun.glass.ui=ALL-UNNAMED',
        '--add-opens', 'java.base/java.io=ALL-UNNAMED'
]

compileKotlin {
    kotlinOptions {
        jvmTarget = '15'
        useIR = true
    }
}

compileJava {
    options.encoding = 'UTF-8'
}

compileTestJava {
    options.encoding = 'UTF-8'
}

repositories {
    mavenCentral()

    //JitPack repository
    maven { url "https://jitpack.io" }

    //repository for FontawesomeFX
    maven { url "https://dl.bintray.com/jerady/maven" }

    //repository for markdown-javafx-renderer
    maven {
        url "https://sandec.bintray.com/repo"
    }

    //repository for JUnique
    maven {
        url "https://raw.githubusercontent.com/terjedahl/junique/master/maven2"
    }
}

configurations {
    //we exclude the javafx group
    implementation.exclude group: 'org.openjfx'
}

test {
    useJUnitPlatform()
}

dependencies {
    //Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib"

    //logging
    implementation 'org.slf4j:slf4j-api:1.7.30'
    implementation 'ch.qos.logback:logback-classic:1.2.3'
    implementation 'ch.qos.logback:logback-core:1.2.3'

    //Testing
    testImplementation 'org.junit.jupiter:junit-jupiter:5.5.2'
    testImplementation 'org.assertj:assertj-core:3.11.1'
    testImplementation 'org.mockito:mockito-core:3.8.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:3.8.0'

    implementation 'com.google.code.gson:gson:2.8.6'
    implementation 'org.jetbrains:annotations:20.1.0'
    implementation 'commons-io:commons-io:2.6'
    implementation 'org.apache.commons:commons-lang3:3.10'
    implementation 'commons-collections:commons-collections:3.2.2'
    implementation 'com.github.Dansoftowner:jFileGoodies:1.2.6'
    implementation 'com.github.oshi:oshi-core:5.7.1'
    implementation 'com.github.Dansoftowner:jSystemThemeDetector:3.4'
    implementation 'com.github.Dansoftowner:Restart4j:1.4.1'
    implementation 'org.jsoup:jsoup:1.13.1'
    implementation 'com.squareup.okhttp3:okhttp:4.9.0'
    implementation 'org.apache.httpcomponents:httpclient:4.5.13'
    implementation 'com.github.ben-manes.caffeine:caffeine:3.0.1'
    implementation 'org.dizitart:nitrite:3.4.3'
    implementation 'it.sauronsoftware:junique:1.0.4'

    implementation 'net.java.dev.jna:jna:5.8.0'
    implementation 'net.java.dev.jna:jna-platform:5.8.0'

    /*** JAVA FX implementation ***/

    implementation 'com.jfoenix:jfoenix:9.0.10'
    implementation 'org.jfxtras:jmetro:11.6.14'
    implementation 'org.controlsfx:controlsfx:11.1.0'
    implementation 'com.dlsc.formsfx:formsfx-core:11.4.1'
    implementation 'com.github.tom91136.GestureFX:gesturefx:gesturefx-parent-0.6.0'
    //Modified WorkBenchFX, Original: 'com.dlsc.workbenchfx:workbenchfx-core:11.1.0'
    implementation 'com.github.Dansoftowner:workbenchfx-fork:11.1.7'
    implementation 'de.jensd:fontawesomefx-commons:11.0'
    implementation 'de.jensd:fontawesomefx-fontawesome:4.7.0-11'
    implementation 'de.jensd:fontawesomefx-materialdesignfont:1.7.22-11'
    implementation 'io.github.typhon0:AnimateFX:1.2.2'
    implementation "com.sandec:mdfx:0.1.9"
    implementation 'com.github.Dansoftowner:FXTaskbarProgressBar:v11.4'
    implementation 'com.github.Dansoftowner:SegmentDialogFX:2.0'
    implementation "de.jangassen:nsmenufx:3.1.0"
    implementation 'com.github.Dansoftowner:MarkdownEditorControlFX:0.6.4'
    implementation 'org.fxmisc.richtext:richtextfx:0.10.6'

    //implementation from the local file system
    implementation fileTree(dir: 'external-libraries', include: '*.jar')
}


shadowJar {
    exclude 'javafx/**'
    exclude 'javafx.properties'
    exclude 'javafx-swt.jar'
    exclude 'junit/**'
    exclude 'module-info.class'

    manifest.attributes('Main-Class': mainClassName)
}

/* -------------------------- Distribution -------------------------- */


task cleanDistributionTemp(type: Delete) {
    doFirst {
        delete "distribution/temp"
    }

    doLast {
        Files.createDirectory(Paths.get(projectDir.toString(), "distribution", "temp"))
    }
}

task cleanDistributionBuild(type: Delete) {
    doFirst {
        delete "distribution/build"
    }
}


task cleanDistributionInput(type: Delete) {
    doFirst {
        delete "distribution/input"
    }

    doLast {
        Files.createDirectory(Paths.get(projectDir.toString(), "distribution", "input"))
    }
}

task createDistributionInput {
    dependsOn shadowJar
    dependsOn cleanDistributionInput
    doLast {
        Files.copy(
                tasks.shadowJar.archiveFile.get().asFile.toPath(),
                Paths.get(projectDir.toString(), "distribution", "input", tasks.shadowJar.archiveFileName.get())
        )
    }
}

task preparteDistribution {
    dependsOn cleanDistributionTemp
    dependsOn cleanDistributionBuild
    dependsOn createDistributionInput
}

jpackage {
    dependsOn preparteDistribution

    appName = project.name
    appVersion = project.version
    input = "${projectDir}${File.separator}distribution${File.separator}input"
    temp = "distribution${File.separator}temp"
    vendor = 'Dansoftware'
    mainJar = shadowJar.archiveFileName.get().toString()
    //verbose
    destination = String.join(File.separator, "distribution", "build")
    licenseFile = String.join(File.separator, "LICENSE")
    javaOptions = applicationDefaultJvmArgs

    winMenu = true
    winDirChooser = true
    winShortcut = true

    linuxDebMaintainer = "dansoftwareowner@gmail.com"
    linuxMenuGroup = project.name
    linuxShortcut = true

    windows {
        icon = "${projectDir}/distribution/icon/Boomega.ico"
        fileAssociations = ["${projectDir}/distribution/file-associations/file-associations-win.properties"]
    }

    linux {
        icon = "${projectDir}/distribution/icon/Boomega.png"
        fileAssociations = ["${projectDir}/distribution/file-associations/file-associations-linux.properties"]
    }

    mac {

    }
}





