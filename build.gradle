apply plugin: 'java'

compileJava.options.encoding = 'UTF-8'

version '0.0.0'

repositories {
    mavenCentral()
    maven {
        url "https://jitpack.io"
    }
}

compileJava {
    options.compilerArgs += ["--add-exports", "javafx.base/com.sun.javafx=ALL-UNNAMED"]
    options.compilerArgs += ["--add-exports", "javafx.base/com.sun.javafx.runtime=ALL-UNNAMED"]
    options.compilerArgs += ["--add-exports", "javafx.graphics/com.sun.javafx.application=ALL-UNNAMED"]
}

compileTestJava {
    options.compilerArgs += ["--add-exports", "javafx.base/com.sun.javafx=ALL-UNNAMED"]
    options.compilerArgs += ["--add-exports", "javafx.base/com.sun.javafx.runtime=ALL-UNNAMED"]
    options.compilerArgs += ["--add-exports", "javafx.graphics/com.sun.javafx.application=ALL-UNNAMED"]
}

processResources {
    from ('src/main/java') {
        include '**/*.fxml'
        include '**/*.css'
    }
}

def mainClass = 'com.dansoftware.libraryapp.main.LibraryAppLauncher'

jar {
    manifest {
       attributes 'Main-Class': mainClass
    }

    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

test {
    useJUnitPlatform()
}

dependencies {
    //Testing
    testImplementation('org.junit.jupiter:junit-jupiter:5.5.2')

    //drivers for jdbc
    implementation("org.xerial:sqlite-jdbc:3.30.1")

    //
    compile group: 'org.json', name: 'json', version: '20190722'

    //Logging
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.30'
    compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'
    compile group: 'ch.qos.logback', name: 'logback-core', version: '1.2.3'

    //Apache libraries
    compile group: 'commons-io', name: 'commons-io', version: '2.6'
    //compile group: 'org.mybatis', name: 'mybatis', version: '3.4.5'

    //libraries for javaFX
    implementation 'com.jfoenix:jfoenix:9.0.9'
    compile group: 'org.controlsfx', name:'controlsfx', version: '11.0.1'
    compile group: 'com.github.goxr3plus', name:'FX-BorderlessScene', version: '4.4.0'

    //libraries from the local file system
    compile fileTree(dir: 'external-libraries', include: '*.jar')
}
