/*
 * Boomega - A modern book explorer & catalog application
 * Copyright (C) 2020-2022  Daniel Gyoerffy
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

import org.gradle.internal.jvm.Jvm

import java.nio.file.Files
import java.util.stream.Collectors

plugins {
    id 'application'
    id 'com.github.johnrengelman.shadow' version '7.1.2' // building fat jars
    id 'org.panteleyev.jpackageplugin' version '1.3.1' // for jpackage
}

application {
    applicationName = rootProject.name
    mainClass = 'com.dansoftware.boomega.main.Main'
    applicationDefaultJvmArgs = [
            '-Dhttps.protocols=TLSv1.2,TLSv1.1,TLSv1', // See #144: https://github.com/Dansoftowner/Boomega/issues/144
            '--add-exports', 'javafx.base/com.sun.javafx=ALL-UNNAMED',
            '--add-exports', 'javafx.base/com.sun.javafx.runtime=ALL-UNNAMED',
            '--add-exports', 'javafx.graphics/com.sun.javafx.application=ALL-UNNAMED',
            '--add-exports', 'javafx.base/com.sun.javafx=ALL-UNNAMED',
            '--add-exports', 'javafx.controls/com.sun.javafx.scene.control.skin.resources=ALL-UNNAMED',
            '--add-exports', 'javafx.graphics/com.sun.javafx.scene=ALL-UNNAMED',
            '--add-exports', 'javafx.graphics/com.sun.glass.ui=ALL-UNNAMED',
            '--add-exports', 'javafx.graphics/com.sun.javafx.text=ALL-UNNAMED',
            '--add-exports', 'javafx.graphics/com.sun.javafx.scene.text=ALL-UNNAMED',
            '--add-exports', 'javafx.graphics/com.sun.javafx.geom=ALL-UNNAMED',
            '--add-opens', 'javafx.graphics/com.sun.javafx.text=ALL-UNNAMED',
            '--add-opens', 'java.base/java.io=ALL-UNNAMED',
            '--add-opens', 'javafx.graphics/javafx.scene.text=ALL-UNNAMED',
            '--add-opens', 'java.base/java.time=ALL-UNNAMED',

            // Pass the gradle system property to Boomega regarding debug-log acceptance
            "-D${BOOMEGA_ACCEPT_DEBUG_LOGS}=${System.getProperty(BOOMEGA_ACCEPT_DEBUG_LOGS)}"
    ]
}

javafx {
    modules = [
            'javafx.base',
            'javafx.graphics',
            'javafx.controls',
    ]
}

dependencies {

    implementation project(':boomega-di')
    implementation project(':boomega-gui')
    implementation project(':boomega-i18n')
    implementation project(':boomega-database')
    implementation project(':boomega-preferences')
    implementation project(':boomega-update')
    implementation project(':boomega-gui:api')
    implementation project(':boomega-plugin')
    implementation project(':boomega-utils')

    // logging
    implementation logback_classic
    implementation logback_core

    // Common utilities
    implementation commons_collections
    implementation gson

    implementation(controlsfx) { exclude group: 'org.openjfx' }

    //implementation from the local file system
    implementation fileTree(dir: '../external-libraries', include: '*.jar')

    testImplementation testFixtures(project(':boomega-preferences'))
}

/* ----------------------- Simulation executions -------------------------- */

task runUpdateSimulation(type: JavaExec) {
    group = "simulation"
    classpath = sourceSets.test.runtimeClasspath
    jvmArgs = applicationDefaultJvmArgs
    description = "Runs a fake update simulation"
    systemProperty('boomega.version', '0.0.0')
    systemProperty('update.next_version', '1.0.0')
    mainClass.set('com.dansoftware.boomega.simulation.UpdateSimulation')
}

task runFirstTimeSimulation(type: JavaExec) {
    group = "simulation"
    classpath = sourceSets.test.runtimeClasspath
    jvmArgs = applicationDefaultJvmArgs
    description = "Runs a fake first-time running simulation"
    mainClass.set('com.dansoftware.boomega.simulation.FirstTimeSimulation')
}

task runInMemoryDatabaseSimulation(type: JavaExec) {
    group = "simulation"
    classpath = sourceSets.test.runtimeClasspath
    jvmArgs = applicationDefaultJvmArgs
    description = 'Runs a fake database activity that doesn\'t save data anywhere'
    mainClass.set('com.dansoftware.boomega.simulation.InMemoryDatabaseSimulation')
}

task runPreloaderSimulation(type: JavaExec) {
    group = "simulation"
    classpath = sourceSets.test.runtimeClasspath
    jvmArgs = applicationDefaultJvmArgs
    description = "Shows the preloader"
    mainClass.set('com.dansoftware.boomega.simulation.PreloaderSimulation')
}

/* -------------------------- Distribution -------------------------- */

shadowJar {

    archiveBaseName.set(application.applicationName)

    manifest.attributes('Main-Class': application.mainClass)
    configurations = [project.configurations.compileClasspath]

    // excluding JavaFX assets
    dependencies { exclude(dependency('org.openjfx::.*')) }
    exclude 'javafx/**'
    exclude 'javafx.properties'
    exclude 'javafx-swt.jar'
    exclude '*.so'
    exclude '*.dylib'

    // excluding random assets shouldn't be included (?)
    exclude 'LICENSE.txt'
    exclude 'NOTICE.txt'
    exclude 'README.md'
    exclude 'about.css'
    exclude 'about.fxml'
    exclude '.gitkeep'
    exclude 'junit/**'
    exclude 'module-info.class'
}

def distributionDir = new File(rootDir, "distribution")
def distributionInputDir = new File(distributionDir, "input")
def distributionBuildDir = new File(distributionDir, "build")
def distributionTempDir = new File(distributionDir, "temp")
def distributionRuntimeDir = new File(distributionDir, "java-runtime")
def distributionIconDir = new File(distributionDir, "icon")
def distributionFileAssociationsDir = new File(distributionDir, "file-associations")

def jlinkExecutable = new File(Jvm.current().getJavaHome(), "bin${File.separator}jlink")


task cleanDistributionTemp(type: Delete) {
    group = 'distribution'
    doFirst {
        delete distributionTempDir
    }

    doLast {
        distributionTempDir.mkdir()
    }
}

task cleanDistributionBuild(type: Delete) {
    group = 'distribution'
    doFirst {
        delete distributionBuildDir
    }
}

task cleanDistributionInput(type: Delete) {
    group = 'distribution'
    doFirst {
        delete distributionInputDir
    }

    doLast {
        distributionInputDir.mkdir()
    }
}

task buildDistributionInput {
    group = 'distribution'
    dependsOn shadowJar
    dependsOn cleanDistributionInput
    doLast {
        Files.copy(
                tasks.shadowJar.archiveFile.get().asFile.toPath(),
                new File(distributionInputDir, tasks.shadowJar.archiveFileName.get()).toPath()
        )
    }
}

task cleanDistributionRuntime {
    group = 'distribution'
    doFirst {
        delete distributionRuntimeDir
    }
}

// builds a java-runtime using jlink
task jlink(type: Exec) {
    group = 'distribution'
    dependsOn cleanDistributionRuntime

    String javaFxModulePath = sourceSets.main.runtimeClasspath.asPath.split(';')
            .stream()
            .filter { it.contains('org.openjfx') }
            .collect(Collectors.joining(';'))

    workingDir = distributionDir.toString()
    executable = jlinkExecutable.toString()
    args = [
            '--output',
            distributionRuntimeDir,
            // reducing the file sizes
            '--strip-debug',
            '--compress', '2',
            '--no-header-files',
            '--no-man-pages',
            '--module-path',
            javaFxModulePath,
            // required modules
            '--add-modules',
            'java.se,javafx.base,javafx.controls,javafx.graphics,javafx.media,javafx.web'
    ]
}

task preparteDistribution {
    group = 'distribution'
    dependsOn cleanDistributionTemp
    dependsOn cleanDistributionBuild
    dependsOn buildDistributionInput
    dependsOn jlink
}

jpackage {
    group = 'distribution'
    dependsOn preparteDistribution

    appName = application.applicationName
    appVersion = project.version
    vendor = 'Dansoftware'
    javaOptions = applicationDefaultJvmArgs

    input = distributionInputDir.toString()
    destination = distributionBuildDir.toString()
    temp = distributionTempDir.toString()
    mainJar = shadowJar.archiveFileName.get().toString()
    runtimeImage = distributionRuntimeDir.toString()

    licenseFile = "LICENSE"

    winMenu = true
    winDirChooser = true
    winShortcut = true

    linuxDebMaintainer = "dansoftwareowner@gmail.com"
    linuxMenuGroup = project.name
    linuxShortcut = true

    windows {
        icon = "${distributionIconDir}/Boomega.ico"
        fileAssociations = ["${distributionFileAssociationsDir}/file-associations-win.properties"]
    }

    linux {
        icon = "${distributionIconDir}/Boomega.png"
        fileAssociations = ["${distributionFileAssociationsDir}/file-associations-linux.properties"]
    }

    mac {
        icon = "${distributionIconDir}/Boomega.icns"
        fileAssociations = ["${distributionFileAssociationsDir}/file-associations-mac.properties"]
    }
}

/* ---------------- Other ----------------- */

task runAsJar(type: Exec) {
    group = 'application'
    description = 'Runs the app from the output jar file'

    dependsOn jlink
    dependsOn shadowJar // We run the jar on the JRE built by jlink

    executable = new File(
            distributionRuntimeDir,
            "bin${File.separator}java"
    )

    args = [
            *applicationDefaultJvmArgs,
            '-jar',
            tasks.shadowJar.archiveFile.get().asFile.absolutePath
    ]
}